disabled_rules: # rule identifiers turned on by default to exclude from running
  - identifier_name # This rule enforces minimum and maximum length requirements for identifiers.
  - type_name # Enforces minimum and maximum length requirements for type names.
  - line_length # Enforces maximum line length.
  - file_length # Enforces maximum file length.
  - function_body_length # Enforces a maximum function body length.
  - type_body_length # Enforces maximum class, struct and enum body length.
  - cyclomatic_complexity # Measures the complexity of function by counting the number of unique paths through it.

analyzer_rules: # Analyze code for correctness issues.
 - explicit_self # Requires explicit use of `self` in closure and method.
 - unused_import # Detects unused import statements.
 - unused_declaration # Detects unused declarations in your code.
  
opt_in_rules: # Rules which are not enabled by default but you have chosen to include them.
 - operator_usage_whitespace # Enforces a space around operator declarations.
 - toggle_bool # Prefer `someBool.toggle()` over `someBool = !someBool`.
 - private_action # Outlet and Action should be declared as private to avoid leaking sensitive information.
 - private_outlet # Outlet and Action should be declared as private to avoid leaking sensitive information.
 - force_unwrapping # Prohibits force unwrapping.
 - empty_count # Prefer checking isEmpty over comparing count == 0.
 - empty_string # Prefer checking isEmpty over comparing string to an empty string literal.
 - sorted_imports # Enforces sorted import statements.
 - yoda_condition # Enforces normal style of boolean expressions (not Yoda conditions).
 - force_try # Prohibits `try!`. This is an unsafe operation as it can lead to runtime errors. Instead, you should handle errors explicitly.
 - force_cast # Prohibits `as!`. Like `try!`, this operation can also lead to runtime errors. Instead, use conditional casting (`as?`).
 - vertical_whitespace # Enforces a maximum number of consecutive empty lines. This can help to prevent random whitespace and maintain cleaner code.
 - trailing_comma # Enforces trailing commas in array and dictionary literals. This makes version control diffs cleaner and editing code easier.
 - unneeded_parentheses_in_closure_argument # Disallows parentheses around non-escaping closure parameters when they can be omitted. This can make your code more readable and idiomatic.
 - implicit_return # Enforces consistent usage of implicit returns in closures and functions. If a single-expression closure or a function consists of a single raw expression, it requires to omit the `return` keyword.
 - redundant_optional_initialization # Flags redundant initializations of optional types to nil.
 - redundant_nil_coalescing # Flags instances where nil coalescing is applied to an optional that has a default value.
 - discarded_notification_center_observer # Flags discarding of NotificationCenter observers as it can lead to potential memory leak.
 - closure_end_indentation # Enforces that the end closure's bracket/brace aligns with the line where the trailing closure begins.
 - opening_brace # Enforces that opening braces are followed by a newline.
 - trailing_newline # Enforces that files end with a trailing newline.
 - redundant_void_return # Flags instances where the Void return keyword is redundant.


statement_position:
  statement_mode: uncuddled_else # if,else,guard,while,etc. must not cuddle with braces.

#trailing_whitespace: # Enforces no trailing whitespace
#    severity: warning
#    ignores_empty_lines: true # Allows trailing white-space in empty lines
#    ignores_comments: true # Allows trailing white-space in comment lines
    
excluded: # Paths to ignore during linting. Takes precedence over `included`.
  - Pods
